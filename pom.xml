<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <groupId>org.kin</groupId>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>kin-framework-java</artifactId>
    <version>0.1.0.0</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
        <CodeCacheSize>512m</CodeCacheSize>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <kin-framework-dependencies.version>0.1.0.0</kin-framework-dependencies.version>
        <spring.version>5.3.7</spring.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.kin</groupId>
                <artifactId>kin-framework-dependencies</artifactId>
                <version>${kin-framework-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- 日志包-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- 超快速超轻量级并行化的Java classpath scanner -->
        <dependency>
            <groupId>io.github.classgraph</groupId>
            <artifactId>classgraph</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 解析yml-->
        <dependency>
            <groupId>org.jyaml</groupId>
            <artifactId>jyaml</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- jackson-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 字节码技术 -->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 命令行工具 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- git操作工具 -->
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- svn操作工具 -->
        <dependency>
            <groupId>org.tmatesoft.svnkit</groupId>
            <artifactId>svnkit</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- io操作工具 -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- spring-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- byte buddy(基于ASM) -->
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy-agent</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>

        <!-- 提供Map以及Queue的非阻塞并发数据结构 -->
        <dependency>
            <groupId>org.jctools</groupId>
            <artifactId>jctools-core</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- maven java编译插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <maxmem>1024m</maxmem>
                    <!--<fork>true</fork>-->
                    <compilerArguments>
                        <!--<verbose/>-->
                    </compilerArguments>
                </configuration>
            </plugin>

            <!-- maven处理依赖插件, -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-dependency-plugin</artifactId>-->
            <!--                <version>3.0.0</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>copy-dependencies</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            &lt;!&ndash; 复制项目依赖到指定路径&ndash;&gt;-->
            <!--                            <goal>copy-dependencies</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

            <!-- maven打包插件-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-jar-plugin</artifactId>-->
            <!--                <version>3.0.2</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>jar</id>-->
            <!--                        <goals>-->
            <!--                            &lt;!&ndash; 打包同时触发打包测试类, 此处再多一个<goal>jar</goal>的话, 会触发两次打包, 而且包名与默认的一样, 会导致包名冲突报错&ndash;&gt;-->
            <!--                            <goal>test-jar</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            &lt;!&ndash; 添加依赖路径&ndash;&gt;-->
            <!--                            <addClasspath>true</addClasspath>-->
            <!--                            &lt;!&ndash; 依赖路径前缀&ndash;&gt;-->
            <!--                            <classpathPrefix>lib/</classpathPrefix>-->
            <!--                            <mainClass></mainClass>-->
            <!--                        </manifest>-->
            <!--                        <manifestEntries>-->
            <!--                            &lt;!&ndash; manifest内自定义的key value&ndash;&gt;-->
            <!--                            <Agent-Class>-->
            <!--                                org.kin.agent.JavaDynamicAgent-->
            <!--                            </Agent-Class>-->
            <!--                            <Can-Redefine-Classes>true</Can-Redefine-Classes>-->
            <!--                            <Can-Retransform-Classes>true</Can-Retransform-Classes>-->
            <!--                            <Class-Path>lib/*</Class-Path>-->
            <!--                        </manifestEntries>-->
            <!--                    </archive>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

            <!-- maven单独打包-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <version>2.5.5</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>make-assembly</id>-->
            <!--                        <goals>-->
            <!--                            &lt;!&ndash; 会把依赖直接写进另外一个单独的jar包&ndash;&gt;-->
            <!--                            <goal>single</goal>-->
            <!--                            &lt;!&ndash; 跟原来的.jar合并 &ndash;&gt;-->
            <!--                            <goal>assembly</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            <addClasspath>true</addClasspath>-->
            <!--                            <classpathPrefix>lib/</classpathPrefix>-->
            <!--                            <mainClass></mainClass>-->
            <!--                        </manifest>-->
            <!--                        <manifestEntries>-->
            <!--                            <Agent-Class>-->
            <!--                                org.kin.agent.JavaDynamicAgent-->
            <!--                            </Agent-Class>-->
            <!--                            <Can-Redefine-Classes>true</Can-Redefine-Classes>-->
            <!--                            <Can-Retransform-Classes>true</Can-Retransform-Classes>-->
            <!--                            <Class-Path>lib/*</Class-Path>-->
            <!--                        </manifestEntries>-->
            <!--                    </archive>-->
            <!--                    <descriptorRefs>-->
            <!--                        &lt;!&ndash; 包名后缀&ndash;&gt;-->
            <!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--                    </descriptorRefs>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

            <!-- 利用assembly.xml打包, 可以根据配置指定打包结构,
                 特别适用于spring boot项目, 有些资源配置放在resources下面, 通过file协议会读取不到(因为在jar里面了)
                 这里面需要将部分文件放到jar外包, 并在启动时, 将其包在classpath里面 -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <version>2.5.5</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>packetToTar</id>-->
            <!--                        <goals>-->
            <!--                            &lt;!&ndash; 会把依赖直接写进另外一个单独的jar包&ndash;&gt;-->
            <!--                            <goal>single</goal>-->
            <!--                        </goals>-->
            <!--                        <phase>package</phase>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <configuration>-->
            <!--                    <appendAssemblyId>false</appendAssemblyId>-->
            <!--                    <descriptors>-->
            <!--                        &lt;!&ndash; 相当于${project.basedir}/assembly/assembly.xml &ndash;&gt;-->
            <!--                        <descriptor>build/assembly.xml</descriptor>-->
            <!--                    </descriptors>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            <addClasspath>true</addClasspath>-->
            <!--                            <classpathPrefix>lib/</classpathPrefix>-->
            <!--                            <mainClass></mainClass>-->
            <!--                        </manifest>-->
            <!--                        <manifestEntries>-->
            <!--                            <Agent-Class>-->
            <!--                                org.kin.agent.JavaDynamicAgent-->
            <!--                            </Agent-Class>-->
            <!--                            <Can-Redefine-Classes>true</Can-Redefine-Classes>-->
            <!--                            <Can-Retransform-Classes>true</Can-Retransform-Classes>-->
            <!--                            <Class-Path>lib/*</Class-Path>-->
            <!--                        </manifestEntries>-->
            <!--                    </archive>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

            <!-- 仅仅添加/src/main/java的源码-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                            <goal>test-jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- jmh插件, install时会触发-->
            <!--<plugin>-->
            <!--<groupId>org.codehaus.mojo</groupId>-->
            <!--<artifactId>exec-maven-plugin</artifactId>-->
            <!--<version>1.6.0</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<id>run-benchmarks</id>-->
            <!--<phase>integration-test</phase>-->
            <!--<goals>-->
            <!--<goal>exec</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--<configuration>-->
            <!--<classpathScope>test</classpathScope>-->
            <!--&lt;!&ndash; 以java执行&ndash;&gt;-->
            <!--<executable>java</executable>-->
            <!--<arguments>-->
            <!--<argument>-classpath</argument>-->
            <!--<classpath />-->
            <!--&lt;!&ndash; 会自动扫描jmh注解并执行相应测试&ndash;&gt;-->
            <!--<argument>org.openjdk.jmh.Main</argument>-->
            <!--<argument>.*</argument>-->
            <!--</arguments>-->
            <!--</configuration>-->
            <!--</plugin>-->

            <!-- 可自动替换pom中的${revision}值  -->
<!--            <plugin>-->
<!--                <groupId>org.codehaus.mojo</groupId>-->
<!--                <artifactId>flatten-maven-plugin</artifactId>-->
<!--                <version>1.1.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; 是否更新pom文件，此处还有更高级的用法 &ndash;&gt;-->
<!--                    <updatePomFile>true</updatePomFile>-->
<!--                    <flattenMode>resolveCiFriendliesOnly</flattenMode>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>flatten</id>-->
<!--                        <phase>process-resources</phase>-->
<!--                        <goals>-->
<!--                            <goal>flatten</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                    <execution>-->
<!--                        <id>flatten.clean</id>-->
<!--                        <phase>clean</phase>-->
<!--                        <goals>-->
<!--                            <goal>clean</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>